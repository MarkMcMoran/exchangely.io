{"version":3,"sources":["Conversion.jsx","SetConversion.jsx","App.js","serviceWorker.js","index.js"],"names":["desc","Conversion","props","formHandler","event","preventDefault","alert","state","currVal","handleSubmission","setState","target","value","console","log","selectedCurr","bind","currencySymbols","this","selectedCurrency","find","currency","id","Container","Card","variant","Body","Title","Text","Form","onSubmit","Dropdown","Toggle","Menu","map","Item","key","eventKey","onSelect","rate","Label","FormControl","placeholder","onChange","Button","size","type","React","Component","SetConversion","useState","currencies","setCurrencies","useEffect","getCurrency","a","fetch","response","json","Currency","ratesArray","rates","Object","entries","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wXAMMA,G,MAAI,UADI,eACJ,6EAqGKC,EAnGf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,YAAc,SAACC,GACXA,EAAMC,iBACNC,MAAM,sBAAwB,EAAKC,MAAMC,UAX1B,EAenBC,iBAAmB,SAACL,GAChB,EAAKM,SACD,CACIF,QAASJ,EAAMO,OAAOC,QAG9BC,QAAQC,IAAI,EAAKP,QAlBjB,EAAKA,MAAQ,CACTQ,cAAe,EACfP,QAAS,IAEb,EAAKC,iBAAmB,EAAKA,iBAAiBO,KAAtB,gBAPT,EADvB,qDA0Bc,IAAD,OACEC,EAAmBC,KAAKhB,MAAxBe,gBACDE,EAAmBF,EAAgBG,MACrC,SAACC,GAAD,OAAcA,EAASC,KAAO,EAAKf,MAAMQ,gBAI7C,OACI,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,QAAQ,WACV,kBAACD,EAAA,EAAKE,KAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAxCV,gBAyCU,kBAACH,EAAA,EAAKI,KAAN,KAAY5B,GACZ,kBAAC6B,EAAA,EAAD,CAAMC,SAAUZ,KAAKf,aACjB,kBAAC4B,EAAA,EAAD,KAEI,kBAACA,EAAA,EAASC,OAAV,CAAiBP,QAAQ,UAAzB,mBAIA,kBAACM,EAAA,EAASE,KAAV,KACKhB,EAAgBiB,KAAI,SAACb,GAAD,OACjB,kBAACU,EAAA,EAASI,KAAV,CACIb,GAAG,iBACHc,IAAK,IAAMf,EAASC,GACpBe,SAAUhB,EAASC,GACnBgB,SAAU,SAACD,GAGP,EAAK3B,SAAS,CACVK,aAAcsB,MAKtB,+BAAKhB,EAASC,GAAd,UAKXH,GACG,oCACI,2CAAiBA,EAAiBG,GAAlC,IAAuCH,EAAiBoB,KAAxD,gBACA,oCACCrB,KAAKX,MAAMC,QADZ,iBACmCW,EAAiBG,GAAKH,EAAiBoB,KAAOrB,KAAKX,MAAMC,WAQxG,kBAACqB,EAAA,EAAKW,MAAN,kBACA,kBAACC,EAAA,EAAD,CAAanB,GAAI,YAAaoB,YAAY,0BAA0BC,SAAUzB,KAAKT,mBAGnF,kBAACmC,EAAA,EAAD,CAEInB,QAAQ,SACRoB,KAAK,KACLvB,GAAG,eACHwB,KAAK,UALT,mBAlF5B,GAAgCC,IAAMC,WCyBvBC,EA9BO,WAEtB,IAF4B,EAIOC,mBAAS,IAJhB,mBAItBC,EAJsB,KAIVC,EAJU,KAM5BC,qBAAU,WACRC,MACC,IAEC,IAAMA,EAAW,uCAAG,8BAAAC,EAAA,sEACQC,MATjB,0CAQS,cACVC,EADU,gBAEOA,EAASC,OAFhB,OAEVC,EAFU,OAGhBP,EAAcO,GAHE,2CAAH,qDAOXC,EAAaT,EAAWU,MAC5BC,OAAOC,QAAQZ,EAAWU,OAAO3B,KAAI,yCAAmB,CACtDZ,GADmC,KAEnCiB,KAFmC,SAIrC,GAEF,OACI,kBAAC,EAAD,CAAYtB,gBAAiB2C,KCZtBI,E,uKARX,OACA,yBAAKC,UAAU,OAClB,kBAAC,EAAD,W,GALiBlB,IAAMC,WCOJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.484e8ad7.chunk.js","sourcesContent":["import React from 'react'\nimport {Button, Card, Container, Dropdown, FormControl, Form} from 'react-bootstrap'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nconst titleApp = `Convertly.io`\nconst desc = `${titleApp} a React application using exchangeratesapi.io API to convert currencies`\n\nexport class Conversion extends React.Component {\n    constructor(props) {\n        super(props)\n        // Starting off at -1 so I go through all indexes of the arr selectedCurr.\n        this.state = {\n            selectedCurr: -1,\n            currVal: \"\"\n        }\n        this.handleSubmission = this.handleSubmission.bind(this)\n    }\n    formHandler = (event) => {\n        event.preventDefault();\n        alert(\"You are submitting \" + this.state.currVal);\n\n    }\n\n    handleSubmission = (event) => {\n        this.setState(\n            {\n                currVal: event.target.value\n            } );\n\n        console.log(this.state)\n    }\n\n\n    render() {\n        const {currencySymbols} = this.props\n        const selectedCurrency = currencySymbols.find(\n            (currency) => currency.id === this.state.selectedCurr\n        )\n\n\n        return (\n            <Container>\n                <Card variant=\"primary\">\n                    <Card.Body>\n                        <Card.Title>{titleApp}</Card.Title>\n                        <Card.Text>{desc}</Card.Text>\n                        <Form onSubmit={this.formHandler}>\n                            <Dropdown>\n\n                                <Dropdown.Toggle variant=\"danger\">\n                                    Select Currency\n                                </Dropdown.Toggle>\n                                {/* Specifying eventKey to compare the currency against the selectedCurr state var. */}\n                                <Dropdown.Menu>\n                                    {currencySymbols.map((currency) => (\n                                        <Dropdown.Item\n                                            id=\"currencySymb0l\"\n                                            key={'c' + currency.id}\n                                            eventKey={currency.id}\n                                            onSelect={(eventKey) => {\n                                                {/* Sets  state to selected option.*/\n                                                }\n                                                this.setState({\n                                                    selectedCurr: eventKey,\n                                                })\n\n                                            }}\n                                        >\n                                            <p> {currency.id} </p>\n                                        </Dropdown.Item>\n                                    ))}\n                                </Dropdown.Menu>\n\n                                {selectedCurrency && (\n                                    <>\n                                        <p>Todays rate: {selectedCurrency.id} {selectedCurrency.rate} per €1</p>\n                                        <p>\n                                       €{this.state.currVal} will get you {selectedCurrency.id}{ selectedCurrency.rate * this.state.currVal }\n                                        </p>\n                                    </>\n\n                                )}\n\n                            </Dropdown>\n\n                            <Form.Label>Currency </Form.Label>\n                            <FormControl id={\"inputCurr\"} placeholder=\"Enter value to convert \" onChange={this.handleSubmission}>\n\n                            </FormControl>\n                            <Button\n\n                                variant=\"danger\"\n                                size=\"md\"\n                                id=\"convertClick\"\n                                type=\"submit\"\n                            >\n                                Convert\n                            </Button>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </Container>\n        )\n    }\n}\n\nexport default Conversion","import React,{useEffect, useState} from 'react';\nimport Conversion from './Conversion';\n\nconst SetConversion = () => {\n\nconst baseURL= \"https://api.exchangeratesapi.io/latest\";\n\nconst[currencies, setCurrencies] = useState([]);\n\nuseEffect(() => {\n  getCurrency();\n}, []);\n\n    const getCurrency = async () => {\n        const response  = await fetch (baseURL);\n        const Currency = await response.json();\n        setCurrencies(Currency);\n\n    }\n //Extracts json array from Object.\n    const ratesArray = currencies.rates\n    ? Object.entries(currencies.rates).map(([key, value]) => ({\n        id: key,\n        rate: value,\n      }))\n    : [];\n\n    return ( \n        <Conversion currencySymbols={ratesArray}/>\n    )\n}\n\n\nexport default SetConversion;","import React from 'react';\n\nimport './App.css';\nimport SetConversion from './SetConversion';\n\nclass App extends React.Component{\n\n  render (){\n    return (\n    <div className=\"App\">\n <SetConversion  />\n    </div>);\n  }\n};\n\n//render(<App />, window.document.getElementById('root'));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}