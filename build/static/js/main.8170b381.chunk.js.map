{"version":3,"sources":["Conversion.jsx","SetConversion.jsx","App.js","serviceWorker.js","index.js"],"names":["desc","Conversion","props","clearFields","setState","selectedCurr","currVal","document","getElementById","reset","handleSubmission","event","preventDefault","target","value","state","bind","currencySymbols","this","selectedCurrency","find","currency","id","Container","Card","variant","Body","Title","Text","Form","onSubmit","Dropdown","Toggle","Menu","map","Item","key","eventKey","onSelect","rate","Label","FormControl","placeholder","as","onChange","type","min","Button","size","onClick","React","Component","SetConversion","useState","currencies","setCurrencies","useEffect","getCurrency","a","fetch","response","json","Currency","ratesArray","rates","Object","entries","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8170b381.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Button, Card, Container, Dropdown, FormControl, Form} from 'react-bootstrap'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nconst titleApp = `Convertly.io`\r\nconst desc = `${titleApp} a React application using exchangeratesapi.io API to convert currencies`\r\n\r\nexport class Conversion extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // Starting off at -1 so I go through all indexes of the arr selectedCurr.\r\n        this.state = {\r\n            selectedCurr: -1,\r\n            currVal: \"\"\r\n        }\r\n        this.handleSubmission = this.handleSubmission.bind(this)\r\n    }\r\n\r\n    clearFields = () => {\r\n        // Clear the state on button click, and clear input field\r\n\r\n        this.setState(\r\n            {\r\n                selectedCurr: \"\",\r\n                currVal: \"\"\r\n            });\r\n        document.getElementById(\"currencyCalcForm\").reset();\r\n\r\n    }\r\n\r\n\r\n    handleSubmission = (event) => {\r\n        event.preventDefault();\r\n        this.setState(\r\n            {\r\n                currVal: event.target.value\r\n            }\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {currencySymbols} = this.props\r\n        const selectedCurrency = currencySymbols.find(\r\n            (currency) => currency.id === this.state.selectedCurr\r\n        )\r\n\r\n\r\n        return (\r\n            <Container id=\"wrapper\">\r\n                <Card variant=\"primary\">\r\n                    <Card.Body>\r\n                        <Card.Title>{titleApp}</Card.Title>\r\n                        <Card.Text>{desc}</Card.Text>\r\n                        <Form id=\"currencyCalcForm\" onSubmit={this.handleSubmission}>\r\n\r\n                            <Dropdown>\r\n                                <Dropdown.Toggle variant=\"danger\">\r\n                                    Select Currency\r\n                                </Dropdown.Toggle>\r\n                                {/* Specifying eventKey to compare the currency against the selectedCurr state var. */}\r\n\r\n                                <Dropdown.Menu>\r\n                                    <div id=\"dropdown-div\">\r\n                                        {currencySymbols.map((currency) => (\r\n                                            <Dropdown.Item\r\n                                                id=\"currencySymb0l\"\r\n                                                key={'c' + currency.id}\r\n                                                eventKey={currency.id}\r\n                                                onSelect={(eventKey) => {\r\n                                                    {/* Sets  state to selected option.*/\r\n                                                    }\r\n                                                    this.setState({\r\n                                                        selectedCurr: eventKey,\r\n                                                    })\r\n                                                }}>\r\n                                                <p> {currency.id} </p>\r\n                                            </Dropdown.Item>))}\r\n                                    </div>\r\n                                </Dropdown.Menu>\r\n\r\n                                {selectedCurrency && (\r\n                                    <>\r\n                                        <p>Today's rate: {selectedCurrency.id} {selectedCurrency.rate} per €1</p>\r\n                                        <p>\r\n                                            {\r\n                                                selectedCurrency.rate * this.state.currVal > 0 &&\r\n                                                <span>\r\n                                             €{this.state.currVal} will get you {this.state.selectedCurr} {selectedCurrency.rate * this.state.currVal}\r\n                                           </span>\r\n\r\n                                            }</p>\r\n                                    </>\r\n\r\n                                )}\r\n                            </Dropdown>\r\n\r\n                            <Form.Label>Currency </Form.Label>\r\n                            <FormControl\r\n                                id={\"inputCurr\"}\r\n                                placeholder={\"Enter value to convert\"}\r\n                                as={\"input\"}\r\n                                onChange={this.handleSubmission}\r\n                                type={\"number\"}\r\n                                min={\"1\"}\r\n                            >\r\n\r\n                            </FormControl>\r\n                            <Button\r\n                                variant=\"danger\"\r\n                                size=\"md\"\r\n                                id=\"convertClick\"\r\n                                type=\"submit\"\r\n                                onClick={this.clearFields}\r\n                            >\r\n                                Clear\r\n                            </Button>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Conversion","import React,{useEffect, useState} from 'react';\r\nimport Conversion from './Conversion';\r\n\r\nconst SetConversion = () => {\r\n\r\nconst baseURL= \"https://api.exchangeratesapi.io/latest\";\r\n\r\nconst[currencies, setCurrencies] = useState([]);\r\n\r\nuseEffect(() => {\r\n  getCurrency();\r\n}, []);\r\n\r\n    const getCurrency = async () => {\r\n        const response  = await fetch (baseURL);\r\n        const Currency = await response.json();\r\n        setCurrencies(Currency);\r\n\r\n    }\r\n //Extracts json array from Object.\r\n    const ratesArray = currencies.rates\r\n    ? Object.entries(currencies.rates).map(([key, value]) => ({\r\n        id: key,\r\n        rate: value,\r\n      }))\r\n    : [];\r\n\r\n    return ( \r\n        <Conversion currencySymbols={ratesArray}/>\r\n    )\r\n}\r\n\r\n\r\nexport default SetConversion;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport SetConversion from './SetConversion';\r\n\r\nclass App extends React.Component{\r\n\r\n  render (){\r\n    return (\r\n    <div className=\"App\">\r\n <SetConversion  />\r\n    </div>);\r\n  }\r\n};\r\n\r\n//render(<App />, window.document.getElementById('root'));\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}